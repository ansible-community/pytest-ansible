[build-system]
requires = [
  "setuptools >= 63.0.0", # required by pyproject+setuptools_scm integration
  "setuptools_scm[toml] >= 7.0.5" # required for "no-local-version" scheme
]
build-backend = "setuptools.build_meta"

[project]
# https://peps.python.org/pep-0621/#readme
requires-python = ">=3.10"
dynamic = ["version", "dependencies", "optional-dependencies"]
name = "pytest-ansible"
description = "Plugin for pytest to simplify calling ansible modules from tests or fixtures"
readme = "README.md"
authors = [{"name" = "Ansible by Red Hat", "email" = "info@ansible.com"}]
maintainers = [{"name" = "Ansible by Red Hat", "email" = "info@ansible.com"}]
license = {text = "MIT"}
classifiers = [
  'Development Status :: 5 - Production/Stable',
  'Intended Audience :: Developers',
  'License :: OSI Approved :: MIT License',
  'Operating System :: OS Independent',
  'Topic :: Software Development :: Testing',
  'Topic :: Software Development :: Quality Assurance',
  'Topic :: Utilities',
  'Programming Language :: Python',
  'Programming Language :: Python :: 3',
  'Programming Language :: Python :: 3.10',
  'Programming Language :: Python :: 3.11',
  'Programming Language :: Python :: 3.12'
]
keywords = ["ansible", "testing", "pytest"]

[project.entry-points.pytest11]
pytest-ansible = 'pytest_ansible.plugin'

[project.urls]
homepage = "https://github.com/ansible/pytest-ansible"
documentation = "https://github.com/ansible/pytest-ansible"
repository = "https://github.com/ansible/pytest-ansible"
changelog = "https://github.com/ansible/pytest-ansible/releases"

[tool.black]
line-length = 100

[tool.coverage.report]
exclude_lines = ["if TYPE_CHECKING:", "pragma: no cover"]
fail_under = 68
ignore_errors = true
show_missing = true
skip_covered = true
skip_empty = true
sort = "Cover"

[tool.coverage.run]
branch = false # https://github.com/nedbat/coveragepy/issues/605
concurrency = ["multiprocessing", "thread"]
parallel = true
source_pkgs = ["pytest_ansible"]

[tool.mypy]
python_version = 3.10
ignore_missing_imports = true
ignore_errors = true
strict = true
color_output = true
error_summary = true
# Temporary disabled until we fix them:
disallow_untyped_calls = false
disallow_untyped_defs = false
disallow_any_generics = false
disable_error_code = ["var-annotated", "attr-defined"]

[[tool.mypy.overrides]]
module = ["ansible.*"]
ignore_missing_imports = true
ignore_errors = true

[tool.pylint.IMPORTS]
preferred-modules = ["py:pathlib", "unittest:pytest"]

[tool.pylint.MAIN]
extension-pkg-allow-list = ["black.parsing"]

[tool.pylint."MESSAGES CONTROL"]
# increase from default is 50 which is too aggressive
max-statements = 60
disable = [
  # On purpose disabled as we rely on black
  "line-too-long",
  # https://github.com/PyCQA/pylint/issues/850
  "cyclic-import",
  # https://github.com/PyCQA/pylint/issues/8453
  "preferred-module",
  # Temporarily disabled until we fix them:
  "duplicate-code",
  "import-error",
  "import-outside-toplevel",
  "missing-function-docstring",
  "missing-module-docstring",
  "no-name-in-module",
  "protected-access",
  "redefined-outer-name",
  "too-many-branches",
  "too-many-locals",
  "too-many-statements",
  "unexpected-keyword-arg",
  "unused-argument",
  "invalid-name",
  "too-few-public-methods"
]

[tool.pytest.ini_options]
minversion = 6.0
addopts = ["--tb=native"]
markers = ["old", "unit", "requires_ansible_v2"]

[tool.ruff]
builtins = ["__"]
fix = true
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = ["ALL"]

[tool.ruff.lint.flake8-pytest-style]
parametrize-values-type = "tuple"

[tool.ruff.lint.isort]
lines-after-imports = 2 # Ensures consistency for cases when there's variable vs function/class definitions after imports
lines-between-types = 1 # Separate import/from with 1 line

[tool.ruff.lint.per-file-ignores]
"_version.py" = ["SIM108"]
"tests/**" = ["SLF001", "S101", "S602", "T201"]
"src/pytest_ansible/errors.py" = ['ANN001', 'ANN101']
"src/pytest_ansible/fixtures.py" = ['ANN001', 'ANN003', 'ANN201', 'ANN202', 'E501']
"src/pytest_ansible/host_manager/__init__.py" = ['ANN001', 'ANN002', 'ANN003', 'ANN101', 'ANN201', 'ANN202', 'ANN204', 'ARG002', 'EM101', 'TRY003']
"src/pytest_ansible/host_manager/v212.py" = ['ANN002', 'ANN003', 'ANN101', 'ANN201']
"src/pytest_ansible/host_manager/v213.py" = ['ANN002', 'ANN003', 'ANN101', 'ANN201']
"src/pytest_ansible/module_dispatcher/__init__.py" = ['ANN001', 'ANN002', 'ANN003', 'ANN101', 'ANN201', 'ANN202', 'ANN204', 'ARG002', 'E501']
"src/pytest_ansible/module_dispatcher/v212.py" = ['ANN001', 'ANN002', 'ANN003', 'ANN101', 'ANN201', 'ANN202', 'ARG002', 'B028', 'C901', 'PLR0912', 'PLR0915', 'PLW2901', 'SLF001']
"src/pytest_ansible/module_dispatcher/v213.py" = ['ANN001', 'ANN002', 'ANN003', 'ANN101', 'ANN201', 'ANN202', 'ARG002', 'B028', 'C901', 'EM101', 'PLR0912', 'PLR0915', 'PLW2901', 'SLF001', 'TRY003']
"src/pytest_ansible/molecule.py" = ['ANN001', 'ANN101', 'ANN201', 'PGH004', 'PLW0603', 'S603', 'S607', 'SLF001', 'T201']
"src/pytest_ansible/plugin.py" = ['ANN001', 'ANN003', 'ANN101', 'ANN201', 'ANN202', 'ANN205', 'ARG002', 'B018', 'B904', 'E501', 'S101', 'SLF001']
"src/pytest_ansible/results.py" = ['ANN001', 'ANN003', 'ANN101', 'ANN201', 'ANN202', 'ANN204', 'E501', 'S101']
"src/pytest_ansible/units.py" = ['E501', 'SLF001', 'TRY400']
"tests/conftest.py" = ['ANN001', 'ANN101', 'ANN201', 'ANN202', 'D100', 'D102', 'D103', 'D107', 'D205', 'FBT002', 'INP001']
"tests/integration/test_molecule.py" = ['E501', 'PLR2004', 'S607']
"tests/test_adhoc.py" = ['ANN001', 'ANN201', 'D100', 'D205', 'E501', 'INP001', 'RUF005']
"tests/test_adhoc_result.py" = ['ANN001', 'ANN201', 'ANN202', 'B007', 'D100', 'D103', 'INP001']
"tests/test_fixtures.py" = ['ANN001', 'ANN201', 'D100', 'D103', 'INP001', 'PGH003']
"tests/test_host_manager.py" = ['ANN001', 'ANN201', 'ARG001', 'D100', 'D103', 'INP001']
"tests/test_module_dispatcher.py" = ['ANN001', 'ANN201', 'ARG001', 'D100', 'D103', 'E501', 'INP001', 'PGH004']
"tests/test_module_result.py" = ['ANN001', 'ANN201', 'ANN202', 'ARG001', 'D100', 'D103', 'E501', 'INP001']
"tests/test_params.py" = ['ANN001', 'ANN201', 'D100', 'D103', 'E501', 'INP001']
"tests/test_plugin.py" = ['ANN001', 'ANN101', 'ANN201', 'ARG002', 'D100', 'D102', 'D103', 'D107', 'INP001', 'PLR2004', 'RUF012']
"tests/unit/test_unit.py" = ['ANN201', 'ARG001', 'S607']

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.setuptools.dynamic]
dependencies = {file = [".config/requirements.in"]}
optional-dependencies.docs = {file = [".config/requirements-docs.in"]}
optional-dependencies.test = {file = [".config/requirements-test.in"]}

[tool.setuptools_scm]
local_scheme = "no-local-version"
write_to = "src/pytest_ansible/_version.py"
