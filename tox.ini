[tox]
requires =
    tox>=4.2
env_list =
    py
    lint
    pkg
    devel
    coverage
skip_missing_interpreters = true

[testenv]
description =
    Run tests
    devel: with ansible-core devel branch and without dependencies constraints
package = editable
deps =
    devel: ansible-core @ git+https://github.com/ansible/ansible.git  # GPLv3+
extras =
    test
pass_env =
    ANSIBLE_DEBUG
    CI
    HOME
    PYTEST_REQPASS
    SETUPTOOLS_SCM_DEBUG
    SSH_AUTH_SOCK
    SSL_CERT_FILE
    be
    by
    for
    git
    https
    may
    needed
    proxies
set_env =
    ANSIBLE_LOCAL_TEMP = {envdir}/.ansible-local
    ANSIBLE_REMOTE_TEMP = {envdir}/.ansible-remote
    COVERAGE_FILE = {env:COVERAGE_FILE:{toxworkdir}/.coverage.{envname}}
    COVERAGE_PROCESS_START = {toxinidir}/pyproject.toml
    PIP_CONSTRAINT = {toxinidir}/.config/requirements.txt
    devel: PIP_CONSTRAINT = /dev/null
    py37: PIP_CONSTRAINT = /dev/null
    py38: PIP_CONSTRAINT = /dev/null
commands_pre =
    sh -c "rm -f .tox/.coverage.* 2>/dev/null || true"
commands =
    coverage run --parallel --source pytest_ansible -m pytest -v --doctest-glob='*.md' {posargs}
    sh -c "coverage combine -a -q --data-file=.coverage .tox/.coverage.*"
allowlist_externals =
    cat
    coverage
    git
    rm
    sh
    tox

[testenv:lint]
deps =
    pre-commit
commands =
    pre-commit --version

[testenv:pkg]
description =
    Do packaging/distribution
skip_install = true
deps =
    build>=0.9
    twine >= 4.0.2  # pyup: ignore
set_env =
commands =
    rm -rfv {toxinidir}/dist/
    python -m build \
      --outdir {toxinidir}/dist/ \
      {toxinidir}
    sh -c "python -m twine check --strict {toxinidir}/dist/*"

[testenv:coverage]
description = Combines and displays coverage results
skip_install = true
deps =
    coverage[toml]>=7.0.5
set_env =
    COVERAGE_FILE = {toxinidir}/.coverage
    COVERAGE_PROCESS_START = {toxinidir}/pyproject.toml
commands_pre =
commands =
    python3 -m coverage --version
    python3 -m coverage xml
    python3 -m coverage report

[testenv:clean]
description = Erase coverage data
skip_install = true
deps =
    coverage[toml]
commands =
    coverage erase

[testenv:deps]
description = Bump all test dependencies
base_python = python3.9
skip_install = true
deps =
    {[testenv:lint]deps}
set_env =
    PIP_CONSTRAINT = /dev/null
commands =
    -pre-commit run --all-files --show-diff-on-failure --hook-stage manual lock
    -pre-commit run --all-files --show-diff-on-failure --hook-stage manual up
    -pre-commit autoupdate
    git diff --exit-code
env_dir = {toxworkdir}/lint
